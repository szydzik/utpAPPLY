Index: src/main/java/pl/edu/utp/model/AppUser.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/pl/edu/utp/model/AppUser.java	(revision )
+++ src/main/java/pl/edu/utp/model/AppUser.java	(revision )
@@ -0,0 +1,112 @@
+package pl.edu.utp.model;
+
+import com.fasterxml.jackson.annotation.JsonIgnore;
+import com.fasterxml.jackson.annotation.JsonProperty;
+import org.springframework.security.core.GrantedAuthority;
+import org.springframework.security.core.authority.SimpleGrantedAuthority;
+import org.springframework.security.core.userdetails.UserDetails;
+
+import javax.persistence.*;
+import java.util.ArrayList;
+import java.util.Collection;
+
+/**
+ * Created by xxbar on 08.01.2017.
+ */
+@Entity
+public class AppUser implements UserDetails {
+
+    @Id
+    @GeneratedValue(strategy = GenerationType.AUTO)
+    private Long id;
+    private String name;
+
+
+    @Column(unique = true)
+    private String username;
+    @JsonProperty(access = JsonProperty.Access.WRITE_ONLY)
+    private String password;
+    private String role;
+
+//
+//    @JsonIgnore
+//    @OneToMany(mappedBy = "owner", cascade = CascadeType.ALL)
+//    private List<Address> addresses;
+
+
+    public Long getId() {
+        return id;
+    }
+
+    public void setId(Long id) {
+        this.id = id;
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public void setName(String name) {
+        this.name = name;
+    }
+
+    public String getUsername() {
+        return username;
+    }
+
+    public void setUsername(String username) {
+        this.username = username;
+    }
+
+    public String getPassword() {
+        return password;
+    }
+
+    public void setPassword(String password) {
+        this.password = password;
+    }
+
+    public String getRole() {
+        return role;
+    }
+
+    public void setRole(String role) {
+        this.role = role;
+    }
+
+    @JsonIgnore
+    @Override
+    public boolean isEnabled() {
+        return true;
+    }
+
+
+    @JsonIgnore
+    @Override
+    public boolean isCredentialsNonExpired() {
+        return true;
+    }
+
+
+    @JsonIgnore
+    @Override
+    public boolean isAccountNonLocked() {
+        return true;
+    }
+
+
+    @JsonIgnore
+    @Override
+    public boolean isAccountNonExpired() {
+        return true;
+    }
+
+    @JsonIgnore
+    @Override
+    public Collection<? extends GrantedAuthority> getAuthorities() {
+        Collection<GrantedAuthority> authorities = new ArrayList<>();
+        authorities.add(new SimpleGrantedAuthority(role));
+        return authorities;
+    }
+
+}
Index: src/main/resources/static/app/app.module.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/resources/static/app/app.module.ts	(revision 039372ff5a833030b199c2c78b9dfea8391e283a)
+++ src/main/resources/static/app/app.module.ts	(revision )
@@ -19,9 +19,16 @@
 import {UniversityListComponent} from "./component/university/university-list.component";
 import {DepartmentDetailsComponent} from "./component/department/department-details.component";
 import {DepartmentListComponent} from "./component/department/department-list.component";
-
+// import {LoginComponent} from "./auth/log-in/log-in.component";
+import {PostService} from "./auth/post.service";
+import {LoginService} from "./auth/log-in.service";
+import {LoginComponent} from "./auth/log-in/log-in.component";
 
 const appRoutes: Routes = [
+  // {
+  //   path: '',
+  //   redirectTo: '/login',
+  // },
   { path: 'person-list', component: PersonListComponent },
   { path: 'person-details', component: PersonDetailsComponent },
 
@@ -37,6 +44,16 @@
   { path: 'home-page', component: HomePageComponent },
   { path: '', component: HomePageComponent },
   { path: 'person-details/:id', component: PersonDetailsComponent },
+
+  {
+    path: 'login',
+    component: LoginComponent
+  },
+  // {
+  //   path: 'add',
+  //   component: PersonDetailsComponent, canActivate: [AuthGuard]
+  // }
+
   // { path: '**', component: PageNotFoundComponent }
 
 ];
@@ -65,10 +82,13 @@
     UniversityListComponent,
     DepartmentDetailsComponent,
     DepartmentListComponent,
+    LoginComponent,
   ],
   providers: [
     PersonService,
     Configuration,
+    PostService,
+    // LoginService,
   ],
   bootstrap:    [ AppComponent ]
 })
Index: src/main/resources/static/app/test/test.component.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/resources/static/app/test/test.component.html	(revision )
+++ src/main/resources/static/app/test/test.component.html	(revision )
@@ -0,0 +1,3 @@
+<div class="container">
+  test component
+</div>
Index: src/main/resources/static/app/auth/log-in/log-in.component.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/resources/static/app/auth/log-in/log-in.component.html	(revision )
+++ src/main/resources/static/app/auth/log-in/log-in.component.html	(revision )
@@ -0,0 +1,18 @@
+<div class="container">
+    <div class="login jumbotron center-block">
+        <form class="form-signin" (submit)="login($event, email.value, password.value)" >
+            <h1>Sign in</h1>
+            <div class="form-group">
+                <label for="email">Email</label>
+                <input type="text" #email class="form-control" id="email"
+                placeholder="Email">
+            </div>
+            <div class="form-group">
+                <label for="password">Password</label>
+                <input type="password" #password class="form-control" id="password"
+                placeholder="Password">
+            </div>
+            <button type="submit" class="btn btn-lg btn-primary">Sign in</button>
+        </form>
+    </div>
+</div>
\ No newline at end of file
Index: src/main/java/pl/edu/utp/utils/AppUserDetailsService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/pl/edu/utp/utils/AppUserDetailsService.java	(revision )
+++ src/main/java/pl/edu/utp/utils/AppUserDetailsService.java	(revision )
@@ -0,0 +1,25 @@
+package pl.edu.utp.utils;
+
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.security.core.userdetails.UserDetails;
+import org.springframework.security.core.userdetails.UserDetailsService;
+import org.springframework.security.core.userdetails.UsernameNotFoundException;
+import org.springframework.stereotype.Service;
+import pl.edu.utp.model.AppUser;
+import pl.edu.utp.repository.AppUserRepository;
+
+/**
+ * Created by xxbar on 08.01.2017.
+ */
+@Service
+public class AppUserDetailsService implements UserDetailsService {
+
+    @Autowired
+    AppUserRepository appUserRepository;
+
+    @Override
+    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
+        AppUser appUser = appUserRepository.findOneByUsername(username);
+        return appUser;
+    }
+}
Index: src/main/resources/static/app/app.component.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/resources/static/app/app.component.ts	(revision 039372ff5a833030b199c2c78b9dfea8391e283a)
+++ src/main/resources/static/app/app.component.ts	(revision )
@@ -1,5 +1,4 @@
 import { Component } from '@angular/core';
-import {Person} from "./model/Person";
 
 @Component({
   moduleId: module.id,
Index: src/main/java/pl/edu/utp/controller/HomeRestController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/pl/edu/utp/controller/HomeRestController.java	(revision )
+++ src/main/java/pl/edu/utp/controller/HomeRestController.java	(revision )
@@ -0,0 +1,38 @@
+package pl.edu.utp.controller;
+
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.http.HttpStatus;
+import org.springframework.http.ResponseEntity;
+import org.springframework.web.bind.annotation.RequestBody;
+import org.springframework.web.bind.annotation.RequestMapping;
+import org.springframework.web.bind.annotation.RequestMethod;
+import org.springframework.web.bind.annotation.RestController;
+import pl.edu.utp.model.AppUser;
+import pl.edu.utp.repository.AppUserRepository;
+
+import java.security.Principal;
+
+/**
+ * Created by xxbar on 08.01.2017.
+ */
+@RestController
+public class HomeRestController {
+
+    @Autowired
+    private AppUserRepository appUserRepository;
+
+    @RequestMapping(value = "/register", method = RequestMethod.POST)
+    public ResponseEntity<AppUser> createUser(@RequestBody AppUser appUser) {
+        if (appUserRepository.findOneByUsername(appUser.getUsername()) != null) {
+            throw new RuntimeException("Username already exist");
+        }
+        appUser.setRole("USER");
+        return new ResponseEntity<AppUser>(appUserRepository.save(appUser), HttpStatus.CREATED);
+    }
+
+    @RequestMapping("/user")
+    public Principal user(Principal principal) {
+        return principal;
+    }
+
+}
Index: pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- pom.xml	(revision 039372ff5a833030b199c2c78b9dfea8391e283a)
+++ pom.xml	(revision )
@@ -14,7 +14,7 @@
 	<parent>
 		<groupId>org.springframework.boot</groupId>
 		<artifactId>spring-boot-starter-parent</artifactId>
-		<version>1.4.2.RELEASE</version>
+		<version>1.4.3.RELEASE</version>
 		<relativePath/> <!-- lookup parent from repository -->
 	</parent>
 
@@ -57,11 +57,21 @@
 			<artifactId>spring-boot-devtools</artifactId>
 			<scope>runtime</scope>
 		</dependency>
+		<dependency>
+			<groupId>org.springframework.boot</groupId>
+			<artifactId>spring-boot-starter-security</artifactId>
+		</dependency>
+
 		<dependency>
 			<groupId>org.postgresql</groupId>
 			<artifactId>postgresql</artifactId>
 			<scope>runtime</scope>
 		</dependency>
+		<!--<dependency>-->
+			<!--<groupId>org.springframework.security</groupId>-->
+			<!--<artifactId>spring-security-config</artifactId>-->
+			<!--<version>4.1.3.RELEASE</version>-->
+		<!--</dependency>-->
 
 	</dependencies>
 
Index: src/main/resources/static/app/auth/auth-guard.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/resources/static/app/auth/auth-guard.ts	(revision )
+++ src/main/resources/static/app/auth/auth-guard.ts	(revision )
@@ -0,0 +1,19 @@
+import { Injectable } from '@angular/core';
+import { Router, CanActivate } from '@angular/router';
+
+@Injectable()
+export class AuthGuard implements CanActivate {
+
+  constructor(private router: Router) {}
+
+  canActivate() {
+
+    if (localStorage.getItem('jwt') !== null) {
+      return true;
+    }
+
+    this.router.navigate(['/login']);
+    return false;
+
+  }
+}
Index: src/main/resources/static/app/auth/log-in.service.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/resources/static/app/auth/log-in.service.ts	(revision )
+++ src/main/resources/static/app/auth/log-in.service.ts	(revision )
@@ -0,0 +1,38 @@
+import {Observable} from "rxjs/Observable";
+import {Injectable} from "@angular/core";
+import {Response} from "@angular/http";
+import { Headers, Http } from '@angular/http';
+import "rxjs/Rx";
+
+
+@Injectable()
+export class LoginService {
+
+    constructor(private http:Http) {}
+
+    login(email : any, password : any):Observable<Response> {
+        let loginRequest = JSON.stringify({email: email, password: password});
+        let headers = new Headers({'Content-Type': 'application/json', 'Accept': 'application/json'});
+
+        return this.http.post('http://localhost:8080/api/login', loginRequest, { headers: headers })
+                        .do(resp => {
+                            localStorage.setItem('jwt', resp.headers.get('x-auth-token'));
+                        });
+    }
+
+    logout():void {
+        localStorage.removeItem('jwt');
+    }
+
+    private handleError(error:Response) {
+        console.error(error);
+        return Observable.throw(error.json().error || 'Server error');
+    }
+
+
+     isSignedIn():boolean {
+        return localStorage.getItem('jwt') !== null;
+    }
+
+
+}
Index: src/main/resources/static/app/auth/post.service.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/resources/static/app/auth/post.service.ts	(revision )
+++ src/main/resources/static/app/auth/post.service.ts	(revision )
@@ -0,0 +1,47 @@
+import {Observable} from "rxjs/Observable";
+import {Injectable} from "@angular/core";
+import {Response} from "@angular/http";
+import { Headers, Http } from '@angular/http';
+import "rxjs/Rx";
+
+// import {Post} from '../model/post';
+
+@Injectable()
+export class PostService {
+
+    private url:string;
+
+    constructor(private http:Http) {
+        this.url = 'http://localhost:8080/api/posts';
+    }
+
+    // getPosts():Observable<Post[]> {
+    //     return this.http.get(this.url, {headers: this.prepareHeaders()})
+    //                     .map(res => res.json())
+    //                     .catch(this.handleError);
+    // }
+    //
+    // getPost(id):Observable<Post> {
+    //     return this.http.get(this.url + "/" + id, {headers: this.prepareHeaders()})
+    //                     .map(res => res.json())
+    //                     .catch(this.handleError);
+    // }
+    //
+    // save(post:Post) {
+    //     return this.http.post(this.url, JSON.stringify(post), {headers: this.prepareHeaders()})
+    //                     .catch(this.handleError);
+    // }
+
+    prepareHeaders(){
+        return new Headers({
+            'Content-Type': 'application/json',
+            'Accept': 'application/json',
+            'x-auth-token': localStorage.getItem('jwt')
+        });
+    }
+
+    private handleError(error:Response) {
+        console.error(error);
+        return Observable.throw(error.json().error || 'Server error');
+    }
+}
Index: src/main/resources/static/app/test/test.component.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/resources/static/app/test/test.component.ts	(revision )
+++ src/main/resources/static/app/test/test.component.ts	(revision )
@@ -0,0 +1,10 @@
+import {Component} from "@angular/core";
+
+@Component({
+  moduleId: module.id,
+  selector: 'test-component',
+  templateUrl: 'test.component.html',
+})
+export class TestComponent{
+//TODO
+}
Index: src/main/java/pl/edu/utp/controller/AppUserRestController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/pl/edu/utp/controller/AppUserRestController.java	(revision )
+++ src/main/java/pl/edu/utp/controller/AppUserRestController.java	(revision )
@@ -0,0 +1,80 @@
+package pl.edu.utp.controller;
+
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.http.HttpStatus;
+import org.springframework.http.ResponseEntity;
+import org.springframework.security.access.prepost.PreAuthorize;
+import org.springframework.security.core.Authentication;
+import org.springframework.security.core.context.SecurityContextHolder;
+import org.springframework.web.bind.annotation.*;
+import pl.edu.utp.model.AppUser;
+import pl.edu.utp.repository.AppUserRepository;
+
+import java.util.List;
+
+/**
+ * Created by xxbar on 08.01.2017.
+ */
+@RestController
+@RequestMapping(value = "/api")
+public class AppUserRestController {
+
+    @Autowired
+    private AppUserRepository appUserRepository;
+
+
+    @RequestMapping(value = "/users", method = RequestMethod.GET)
+    public List<AppUser> users() {
+        return appUserRepository.findAll();
+    }
+
+
+    @PreAuthorize("hasRole('ROLE_ADMIN')")
+    @RequestMapping(value = "/users/{id}", method = RequestMethod.GET)
+    public ResponseEntity<AppUser> userById(@PathVariable Long id) {
+        AppUser appUser = appUserRepository.findOne(id);
+        if (appUser == null) {
+            return new ResponseEntity<AppUser>(HttpStatus.NO_CONTENT);
+        } else {
+            return new ResponseEntity<AppUser>(appUser, HttpStatus.OK);
+        }
+    }
+
+
+    @RequestMapping(value = "/users/{id}", method = RequestMethod.DELETE)
+    public ResponseEntity<AppUser> deleteUser(@PathVariable Long id) {
+        AppUser appUser = appUserRepository.findOne(id);
+        Authentication auth = SecurityContextHolder.getContext().getAuthentication();
+        String loggedUsername = auth.getName();
+        if (appUser == null) {
+            return new ResponseEntity<AppUser>(HttpStatus.NO_CONTENT);
+        } else if (appUser.getUsername().equalsIgnoreCase(loggedUsername)) {
+            throw new RuntimeException("You cannot delete your account");
+        } else {
+            appUserRepository.delete(appUser);
+            return new ResponseEntity<AppUser>(appUser, HttpStatus.OK);
+        }
+
+
+    }
+
+    @PreAuthorize("hasRole('ROLE_ADMIN')")
+    @RequestMapping(value = "/users", method = RequestMethod.POST)
+    public ResponseEntity<AppUser> createUser(@RequestBody AppUser appUser) {
+        if (appUserRepository.findOneByUsername(appUser.getUsername()) != null) {
+            throw new RuntimeException("Username already exist");
+        }
+        return new ResponseEntity<AppUser>(appUserRepository.save(appUser), HttpStatus.CREATED);
+    }
+
+    @PreAuthorize("hasRole('ROLE_ADMIN')")
+    @RequestMapping(value = "/users", method = RequestMethod.PUT)
+    public AppUser updateUser(@RequestBody AppUser appUser) {
+        if (appUserRepository.findOneByUsername(appUser.getUsername()) != null
+                && appUserRepository.findOneByUsername(appUser.getUsername()).getId() != appUser.getId()) {
+            throw new RuntimeException("Username already exist");
+        }
+        return appUserRepository.save(appUser);
+    }
+
+}
Index: src/main/java/pl/edu/utp/repository/AppUserRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/pl/edu/utp/repository/AppUserRepository.java	(revision )
+++ src/main/java/pl/edu/utp/repository/AppUserRepository.java	(revision )
@@ -0,0 +1,13 @@
+package pl.edu.utp.repository;
+
+import org.springframework.data.jpa.repository.JpaRepository;
+import pl.edu.utp.model.AppUser;
+
+/**
+ * Created by xxbar on 08.01.2017.
+ */
+public interface AppUserRepository extends JpaRepository<AppUser, Long> {
+
+    public AppUser findOneByUsername(String username);
+
+}
Index: src/main/resources/static/app/component/homepage/home-page.component.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/resources/static/app/component/homepage/home-page.component.html	(revision 039372ff5a833030b199c2c78b9dfea8391e283a)
+++ src/main/resources/static/app/component/homepage/home-page.component.html	(revision )
@@ -1,8 +1,9 @@
 <div style="position: relative; overflow: hidden">
 
-  <div class="" style="position: relative; width: 50%; float: left;">
+  <div class="container" style="position: relative; width: 50%; float: left;">
     <h1>Hello, world!</h1>
     <p>
+      zżźZŹŻcćńnoó
       Last Christmas<br>
       I gave you my heart<br>
       But the very next day<br>
Index: src/main/resources/static/app/auth/log-in/log-in.component.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/resources/static/app/auth/log-in/log-in.component.ts	(revision )
+++ src/main/resources/static/app/auth/log-in/log-in.component.ts	(revision )
@@ -0,0 +1,35 @@
+import {Component} from "@angular/core";
+import {Router} from '@angular/router';
+import {LoginService} from "../log-in.service";
+// import {LoginService} from "../log-in.service";
+
+@Component({
+  moduleId: module.id,
+    selector: 'log-in',
+    templateUrl: 'log-in.component.html',
+    // directives: [ROUTER_DIRECTIVES]
+  providers: [LoginService],
+})
+export class LoginComponent {
+
+    constructor(private router:Router, private loginService: LoginService) {
+    }
+
+    login(event : any, email : any, password : any) {
+        event.preventDefault();
+        this.loginService.login(email, password)
+            .subscribe(() => {
+                this.router.navigate(['/add']);
+            }, this.handleError);
+    }
+
+    logout():void {
+        localStorage.removeItem('jwt');
+    }
+
+
+    handleError(error : any) {
+        console.log(error.status);
+    }
+
+}
Index: src/main/java/pl/edu/utp/utils/WebConfig.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/pl/edu/utp/utils/WebConfig.java	(revision )
+++ src/main/java/pl/edu/utp/utils/WebConfig.java	(revision )
@@ -0,0 +1,87 @@
+package pl.edu.utp.utils;
+
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.beans.factory.annotation.Configurable;
+import org.springframework.http.HttpMethod;
+import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
+import org.springframework.security.config.annotation.web.builders.HttpSecurity;
+import org.springframework.security.config.annotation.web.builders.WebSecurity;
+import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
+import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
+
+/**
+ * Created by xxbar on 08.01.2017.
+ */
+@Configurable
+@EnableWebSecurity
+public class WebConfig extends WebSecurityConfigurerAdapter {
+
+    @Autowired
+    AppUserDetailsService appUserDetailsService;
+
+
+    // This method is for overriding the default AuthenticationManagerBuilder.
+    // We can specify how the user details are kept in the application. It may
+    // be in a database, LDAP or in memory.
+    @Override
+    protected void configure(AuthenticationManagerBuilder auth) throws Exception {
+        auth.userDetailsService(appUserDetailsService);
+    }
+
+
+    // This method is for overriding some configuration of the WebSecurity
+    // If you want to ignore some request or request patterns then you can
+    // specify that inside this method
+    @Override
+    public void configure(WebSecurity web) throws Exception {
+        super.configure(web);
+    }
+
+
+    // This method is used for override HttpSecurity of the web Application.
+    // We can specify our authorization criteria inside this method.
+    @Override
+    protected void configure(HttpSecurity http) throws Exception {
+//        http
+//                // starts authorizing configurations
+//                .authorizeRequests()
+//                // ignoring the "/", "/index.html", "/app/**", "/register",
+//                // "/favicon.ico"
+//                .antMatchers("/", "/index.html", "/app/**", "/register", "/favicon.ico", "/#", "/api/**").permitAll()
+//                // authenticate all remaining URLS
+//                .anyRequest().fullyAuthenticated().and()
+//                // enabling the basic authentication
+//                .httpBasic().and()
+//                // configuring the session as state less. Which means there is
+//                // no session in the server
+//                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and()
+//                // disabling the CSRF - Cross Site Request Forgery
+//                .csrf().disable();
+
+        http.csrf().disable();
+
+        //h2 database console
+        http.headers().frameOptions().disable();
+
+        http.exceptionHandling()
+                .and().anonymous()
+                .and().servletApi()
+                .and().headers().cacheControl();
+
+        http.authorizeRequests()
+                .antMatchers(HttpMethod.GET, "/api/person").permitAll()
+                .antMatchers(HttpMethod.POST, "/api/person").hasRole("USER")
+                .antMatchers(HttpMethod.POST, "/#/person-list").hasRole("USER");
+//                .antMatchers(HttpMethod.GET, "/api/person").hasRole("USER");
+//                .antMatchers(HttpMethod.GET, "/console/**").permitAll();
+
+//        http.addFilterBefore(
+//                new StatelessLoginFilter("/api/login", tokenAuthenticationService, userService, authenticationManager()),
+//                UsernamePasswordAuthenticationFilter.class);
+//
+//        http.addFilterBefore(
+//                new StatelessAuthenticationFilter(tokenAuthenticationService),
+//                UsernamePasswordAuthenticationFilter.class);
+    }
+
+}
